
#line 1 "skt_translit_iast_iastc.rl"

#line 89 "skt_translit_iast_iastc.rl"


static void skt_translit_iast_iastc(struct skt_buf *buf,
                           const char *str, size_t len)
{
   int cs, act;
   const unsigned char *ts, *te;
   const unsigned char *p = (const unsigned char *)str;
   const unsigned char *pe = &p[len];
   const unsigned char *const eof = pe;

   buf->size = 0;
   
#line 19 "skt_translit_iast_iastc.ic"
static const char _skt_translit_iast_iastc_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13
};

static const char _skt_translit_iast_iastc_key_offsets[] = {
	0, 4, 8, 9
};

static const unsigned char _skt_translit_iast_iastc_trans_keys[] = {
	182u, 183u, 184u, 185u, 154u, 155u, 156u, 157u, 
	225u, 184u, 185u, 0
};

static const char _skt_translit_iast_iastc_single_lengths[] = {
	4, 4, 1, 2
};

static const char _skt_translit_iast_iastc_range_lengths[] = {
	0, 0, 0, 0
};

static const char _skt_translit_iast_iastc_index_offsets[] = {
	0, 5, 10, 12
};

static const char _skt_translit_iast_iastc_trans_targs[] = {
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 0, 1, 2, 2, 
	2, 2, 0
};

static const char _skt_translit_iast_iastc_trans_actions[] = {
	7, 9, 11, 13, 27, 15, 17, 19, 
	21, 27, 5, 23, 0, 0, 25, 27, 
	27, 25, 0
};

static const char _skt_translit_iast_iastc_to_state_actions[] = {
	0, 0, 1, 0
};

static const char _skt_translit_iast_iastc_from_state_actions[] = {
	0, 0, 3, 0
};

static const char _skt_translit_iast_iastc_eof_trans[] = {
	17, 17, 0, 18
};

static const int skt_translit_iast_iastc_start = 2;
static const int skt_translit_iast_iastc_first_final = 2;
static const int skt_translit_iast_iastc_error = -1;

static const int skt_translit_iast_iastc_en_main = 2;


#line 102 "skt_translit_iast_iastc.rl"
   
#line 81 "skt_translit_iast_iastc.ic"
	{
	cs = skt_translit_iast_iastc_start;
	ts = 0;
	te = 0;
	act = 0;
	}

#line 103 "skt_translit_iast_iastc.rl"
   
#line 91 "skt_translit_iast_iastc.ic"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const unsigned char *_keys;

	if ( p == pe )
		goto _test_eof;
_resume:
	_acts = _skt_translit_iast_iastc_actions + _skt_translit_iast_iastc_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
#line 1 "NONE"
	{ts = p;}
	break;
#line 110 "skt_translit_iast_iastc.ic"
		}
	}

	_keys = _skt_translit_iast_iastc_trans_keys + _skt_translit_iast_iastc_key_offsets[cs];
	_trans = _skt_translit_iast_iastc_index_offsets[cs];

	_klen = _skt_translit_iast_iastc_single_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _skt_translit_iast_iastc_range_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
_eof_trans:
	cs = _skt_translit_iast_iastc_trans_targs[_trans];

	if ( _skt_translit_iast_iastc_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _skt_translit_iast_iastc_actions + _skt_translit_iast_iastc_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
#line 1 "NONE"
	{te = p+1;}
	break;
	case 3:
#line 65 "skt_translit_iast_iastc.rl"
	{te = p+1;{
   skt_buf_grow(buf, 3);
   buf->data[buf->size++] = 76;
   buf->data[buf->size++] = 204;
   buf->data[buf->size++] = 165;
}}
	break;
	case 4:
#line 31 "skt_translit_iast_iastc.rl"
	{te = p+1;{
   skt_buf_grow(buf, 3);
   buf->data[buf->size++] = 108;
   buf->data[buf->size++] = 204;
   buf->data[buf->size++] = 165;
}}
	break;
	case 5:
#line 56 "skt_translit_iast_iastc.rl"
	{te = p+1;{
   skt_buf_grow(buf, 5);
   buf->data[buf->size++] = 76;
   buf->data[buf->size++] = 204;
   buf->data[buf->size++] = 165;
   buf->data[buf->size++] = 204;
   buf->data[buf->size++] = 132;
}}
	break;
	case 6:
#line 47 "skt_translit_iast_iastc.rl"
	{te = p+1;{
   skt_buf_grow(buf, 5);
   buf->data[buf->size++] = 108;
   buf->data[buf->size++] = 204;
   buf->data[buf->size++] = 165;
   buf->data[buf->size++] = 204;
   buf->data[buf->size++] = 132;
}}
	break;
	case 7:
#line 8 "skt_translit_iast_iastc.rl"
	{te = p+1;{
   skt_buf_grow(buf, 3);
   buf->data[buf->size++] = 82;
   buf->data[buf->size++] = 204;
   buf->data[buf->size++] = 165;
}}
	break;
	case 8:
#line 24 "skt_translit_iast_iastc.rl"
	{te = p+1;{
   skt_buf_grow(buf, 3);
   buf->data[buf->size++] = 114;
   buf->data[buf->size++] = 204;
   buf->data[buf->size++] = 165;
}}
	break;
	case 9:
#line 38 "skt_translit_iast_iastc.rl"
	{te = p+1;{
   skt_buf_grow(buf, 5);
   buf->data[buf->size++] = 82;
   buf->data[buf->size++] = 204;
   buf->data[buf->size++] = 165;
   buf->data[buf->size++] = 204;
   buf->data[buf->size++] = 132;
}}
	break;
	case 10:
#line 15 "skt_translit_iast_iastc.rl"
	{te = p+1;{
   skt_buf_grow(buf, 5);
   buf->data[buf->size++] = 114;
   buf->data[buf->size++] = 204;
   buf->data[buf->size++] = 165;
   buf->data[buf->size++] = 204;
   buf->data[buf->size++] = 132;
}}
	break;
	case 11:
#line 83 "skt_translit_iast_iastc.rl"
	{te = p+1;{
      skt_buf_grow(buf, 1);
      buf->data[buf->size++] = *p;
   }}
	break;
	case 12:
#line 83 "skt_translit_iast_iastc.rl"
	{te = p;p--;{
      skt_buf_grow(buf, 1);
      buf->data[buf->size++] = *p;
   }}
	break;
	case 13:
#line 83 "skt_translit_iast_iastc.rl"
	{{p = ((te))-1;}{
      skt_buf_grow(buf, 1);
      buf->data[buf->size++] = *p;
   }}
	break;
#line 280 "skt_translit_iast_iastc.ic"
		}
	}

_again:
	_acts = _skt_translit_iast_iastc_actions + _skt_translit_iast_iastc_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
#line 1 "NONE"
	{ts = 0;}
	break;
#line 293 "skt_translit_iast_iastc.ic"
		}
	}

	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _skt_translit_iast_iastc_eof_trans[cs] > 0 ) {
		_trans = _skt_translit_iast_iastc_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	}

#line 104 "skt_translit_iast_iastc.rl"

   skt_buf_truncate(buf, buf->size);
}