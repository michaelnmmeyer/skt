
#line 1 "skt_sort.rl"

#line 796 "skt_sort.rl"


void skt_sort_key(struct skt_buf *buf, const char *str, size_t len)
{
   int cs, act;
   const unsigned char *ts, *te;
   const unsigned char *p = (const unsigned char *)str;
   const unsigned char *pe = &p[len];
   const unsigned char *const eof = pe;

   buf->size = 0;
   
#line 18 "skt_sort.ic"
static const unsigned char _skt_sort_key_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 24, 1, 25, 1, 26, 1, 
	27, 1, 28, 1, 29, 1, 30, 1, 
	31, 1, 32, 1, 33, 1, 34, 1, 
	35, 1, 36, 1, 37, 1, 38, 1, 
	39, 1, 40, 1, 41, 1, 42, 1, 
	43, 1, 44, 1, 45, 1, 46, 1, 
	47, 1, 48, 1, 49, 1, 50, 1, 
	51, 1, 52, 1, 53, 1, 54, 1, 
	55, 1, 56, 1, 57, 1, 58, 1, 
	59, 1, 60, 1, 61, 1, 62, 1, 
	63, 1, 64, 1, 65, 1, 66, 1, 
	67, 1, 68, 1, 69, 1, 70, 1, 
	71, 1, 72, 1, 73, 1, 74, 1, 
	75, 1, 76, 1, 77, 1, 78, 1, 
	79, 1, 80, 1, 81, 1, 82, 1, 
	83, 1, 84, 1, 85, 1, 86, 1, 
	87, 1, 88, 1, 89, 1, 90, 1, 
	91, 1, 92, 1, 93, 1, 94, 1, 
	95, 1, 96, 1, 97, 1, 98, 1, 
	99, 1, 100, 1, 101, 1, 102, 1, 
	103, 1, 104, 1, 105, 1, 106, 1, 
	107, 1, 108, 1, 109, 1, 110, 1, 
	111, 1, 112, 1, 113, 1, 114, 1, 
	115, 1, 116, 1, 117, 1, 118, 1, 
	119, 1, 120, 1, 121, 1, 122, 1, 
	123, 1, 124, 1, 125, 1, 126, 1, 
	127, 1, 128, 1, 129, 1, 130, 1, 
	131, 1, 132, 1, 133, 1, 134, 1, 
	135, 1, 136, 1, 137, 1, 138, 1, 
	139, 1, 140, 1, 141, 1, 142, 1, 
	143
};

static const unsigned char _skt_sort_key_key_offsets[] = {
	0, 1, 2, 3, 4, 5, 6, 7, 
	8, 16, 30, 76, 80, 82, 84, 86, 
	88, 90, 92, 93, 94, 96, 97, 98, 
	100, 104, 106, 108, 110, 112, 114, 116, 
	117, 118, 120, 121, 122, 124, 126, 130, 
	134, 136, 138, 140, 142
};

static const unsigned char _skt_sort_key_trans_keys[] = {
	165u, 132u, 165u, 132u, 165u, 132u, 165u, 132u, 
	140u, 141u, 164u, 165u, 182u, 183u, 184u, 185u, 
	130u, 131u, 132u, 133u, 134u, 135u, 154u, 155u, 
	156u, 157u, 162u, 163u, 172u, 173u, 65u, 66u, 
	67u, 68u, 69u, 71u, 72u, 73u, 74u, 75u, 
	76u, 77u, 78u, 79u, 80u, 82u, 83u, 84u, 
	85u, 86u, 89u, 97u, 98u, 99u, 100u, 101u, 
	103u, 104u, 105u, 106u, 107u, 108u, 109u, 110u, 
	111u, 112u, 114u, 115u, 116u, 117u, 118u, 121u, 
	195u, 196u, 197u, 225u, 73u, 85u, 105u, 117u, 
	72u, 104u, 72u, 104u, 72u, 104u, 72u, 104u, 
	72u, 104u, 72u, 104u, 204u, 204u, 72u, 104u, 
	204u, 204u, 72u, 104u, 73u, 85u, 105u, 117u, 
	72u, 104u, 72u, 104u, 72u, 104u, 72u, 104u, 
	72u, 104u, 72u, 104u, 204u, 204u, 72u, 104u, 
	204u, 204u, 72u, 104u, 145u, 177u, 128u, 129u, 
	170u, 171u, 154u, 155u, 170u, 171u, 184u, 185u, 
	72u, 104u, 72u, 104u, 72u, 104u, 72u, 104u, 
	0
};

static const char _skt_sort_key_single_lengths[] = {
	1, 1, 1, 1, 1, 1, 1, 1, 
	8, 14, 46, 4, 2, 2, 2, 2, 
	2, 2, 1, 1, 2, 1, 1, 2, 
	4, 2, 2, 2, 2, 2, 2, 1, 
	1, 2, 1, 1, 2, 2, 4, 4, 
	2, 2, 2, 2, 2
};

static const char _skt_sort_key_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
};

static const unsigned char _skt_sort_key_index_offsets[] = {
	0, 2, 4, 6, 8, 10, 12, 14, 
	16, 25, 40, 87, 92, 95, 98, 101, 
	104, 107, 110, 112, 114, 117, 119, 121, 
	124, 129, 132, 135, 138, 141, 144, 147, 
	149, 151, 154, 156, 158, 161, 164, 169, 
	174, 177, 180, 183, 186
};

static const char _skt_sort_key_trans_targs[] = {
	19, 10, 10, 10, 22, 10, 10, 10, 
	32, 10, 10, 10, 35, 10, 10, 10, 
	41, 42, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 43, 44, 10, 
	11, 12, 13, 14, 10, 15, 10, 10, 
	16, 17, 18, 10, 10, 10, 20, 21, 
	10, 23, 10, 10, 10, 24, 25, 26, 
	27, 10, 28, 10, 10, 29, 30, 31, 
	10, 10, 10, 33, 34, 10, 36, 10, 
	10, 10, 37, 38, 39, 40, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 0, 10, 
	1, 10, 10, 10, 10, 2, 10, 3, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 4, 10, 5, 10, 10, 
	10, 10, 6, 10, 7, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 8, 9, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 0
};

static const short _skt_sort_key_trans_actions[] = {
	5, 283, 47, 275, 5, 279, 31, 271, 
	5, 285, 49, 277, 5, 281, 33, 273, 
	0, 0, 79, 81, 39, 41, 43, 45, 
	287, 75, 77, 99, 101, 139, 141, 27, 
	29, 35, 37, 195, 197, 0, 0, 287, 
	0, 0, 0, 0, 51, 0, 203, 11, 
	0, 0, 5, 179, 159, 63, 0, 5, 
	199, 0, 19, 187, 183, 0, 0, 0, 
	0, 53, 0, 205, 13, 0, 0, 5, 
	181, 161, 65, 0, 5, 201, 0, 21, 
	189, 185, 0, 0, 0, 5, 207, 55, 
	67, 57, 69, 209, 171, 173, 257, 103, 
	105, 229, 151, 153, 249, 91, 93, 225, 
	111, 113, 233, 83, 85, 221, 0, 265, 
	0, 217, 163, 165, 253, 0, 261, 0, 
	213, 143, 145, 245, 59, 71, 61, 73, 
	211, 175, 177, 259, 107, 109, 231, 155, 
	157, 251, 95, 97, 227, 115, 117, 235, 
	87, 89, 223, 0, 267, 0, 219, 167, 
	169, 255, 0, 263, 0, 215, 147, 149, 
	247, 119, 121, 269, 7, 9, 15, 17, 
	269, 191, 193, 23, 25, 269, 0, 0, 
	269, 131, 133, 241, 135, 137, 243, 123, 
	125, 237, 127, 129, 239, 283, 275, 279, 
	271, 285, 277, 281, 273, 287, 287, 209, 
	257, 229, 249, 225, 233, 221, 265, 217, 
	253, 261, 213, 245, 211, 259, 231, 251, 
	227, 235, 223, 267, 219, 255, 263, 215, 
	247, 269, 269, 269, 269, 241, 243, 237, 
	239, 0
};

static const short _skt_sort_key_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
};

static const short _skt_sort_key_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
};

static const unsigned char _skt_sort_key_eof_trans[] = {
	190, 191, 192, 193, 194, 195, 196, 197, 
	199, 199, 0, 200, 201, 202, 203, 204, 
	205, 206, 207, 208, 209, 210, 211, 212, 
	213, 214, 215, 216, 217, 218, 219, 220, 
	221, 222, 223, 224, 225, 229, 229, 229, 
	229, 230, 231, 232, 233
};

static const int skt_sort_key_start = 10;
static const int skt_sort_key_first_final = 10;
static const int skt_sort_key_error = -1;

static const int skt_sort_key_en_main = 10;


#line 808 "skt_sort.rl"
   
#line 219 "skt_sort.ic"
	{
	cs = skt_sort_key_start;
	ts = 0;
	te = 0;
	act = 0;
	}

#line 809 "skt_sort.rl"
   
#line 229 "skt_sort.ic"
	{
	int _klen;
	unsigned int _trans;
	const unsigned char *_acts;
	unsigned int _nacts;
	const unsigned char *_keys;

	if ( p == pe )
		goto _test_eof;
_resume:
	_acts = _skt_sort_key_actions + _skt_sort_key_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
#line 1 "NONE"
	{ts = p;}
	break;
#line 248 "skt_sort.ic"
		}
	}

	_keys = _skt_sort_key_trans_keys + _skt_sort_key_key_offsets[cs];
	_trans = _skt_sort_key_index_offsets[cs];

	_klen = _skt_sort_key_single_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _skt_sort_key_range_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
_eof_trans:
	cs = _skt_sort_key_trans_targs[_trans];

	if ( _skt_sort_key_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _skt_sort_key_actions + _skt_sort_key_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
#line 1 "NONE"
	{te = p+1;}
	break;
	case 3:
#line 17 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 2;
   buf->data[buf->size++] = 1;
}}
	break;
	case 4:
#line 22 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 2;
   buf->data[buf->size++] = 2;
}}
	break;
	case 5:
#line 27 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 3;
   buf->data[buf->size++] = 1;
}}
	break;
	case 6:
#line 32 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 3;
   buf->data[buf->size++] = 2;
}}
	break;
	case 7:
#line 37 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 4;
   buf->data[buf->size++] = 1;
}}
	break;
	case 8:
#line 42 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 4;
   buf->data[buf->size++] = 2;
}}
	break;
	case 9:
#line 47 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 5;
   buf->data[buf->size++] = 1;
}}
	break;
	case 10:
#line 52 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 5;
   buf->data[buf->size++] = 2;
}}
	break;
	case 11:
#line 57 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 6;
   buf->data[buf->size++] = 1;
}}
	break;
	case 12:
#line 62 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 6;
   buf->data[buf->size++] = 2;
}}
	break;
	case 13:
#line 77 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 8;
   buf->data[buf->size++] = 1;
}}
	break;
	case 14:
#line 82 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 8;
   buf->data[buf->size++] = 2;
}}
	break;
	case 15:
#line 87 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 9;
   buf->data[buf->size++] = 1;
}}
	break;
	case 16:
#line 92 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 9;
   buf->data[buf->size++] = 2;
}}
	break;
	case 17:
#line 97 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 10;
   buf->data[buf->size++] = 1;
}}
	break;
	case 18:
#line 102 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 10;
   buf->data[buf->size++] = 2;
}}
	break;
	case 19:
#line 117 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 12;
   buf->data[buf->size++] = 1;
}}
	break;
	case 20:
#line 122 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 12;
   buf->data[buf->size++] = 2;
}}
	break;
	case 21:
#line 127 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 13;
   buf->data[buf->size++] = 1;
}}
	break;
	case 22:
#line 132 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 13;
   buf->data[buf->size++] = 2;
}}
	break;
	case 23:
#line 137 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 14;
   buf->data[buf->size++] = 1;
}}
	break;
	case 24:
#line 142 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 14;
   buf->data[buf->size++] = 2;
}}
	break;
	case 25:
#line 147 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 15;
   buf->data[buf->size++] = 1;
}}
	break;
	case 26:
#line 152 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 15;
   buf->data[buf->size++] = 2;
}}
	break;
	case 27:
#line 157 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 16;
   buf->data[buf->size++] = 1;
}}
	break;
	case 28:
#line 162 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 16;
   buf->data[buf->size++] = 2;
}}
	break;
	case 29:
#line 167 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 16;
   buf->data[buf->size++] = 3;
}}
	break;
	case 30:
#line 172 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 16;
   buf->data[buf->size++] = 4;
}}
	break;
	case 31:
#line 177 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 17;
   buf->data[buf->size++] = 1;
}}
	break;
	case 32:
#line 182 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 17;
   buf->data[buf->size++] = 2;
}}
	break;
	case 33:
#line 187 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 18;
   buf->data[buf->size++] = 1;
}}
	break;
	case 34:
#line 192 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 18;
   buf->data[buf->size++] = 2;
}}
	break;
	case 35:
#line 197 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 18;
   buf->data[buf->size++] = 3;
}}
	break;
	case 36:
#line 202 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 18;
   buf->data[buf->size++] = 4;
}}
	break;
	case 37:
#line 207 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 19;
   buf->data[buf->size++] = 1;
}}
	break;
	case 38:
#line 212 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 19;
   buf->data[buf->size++] = 2;
}}
	break;
	case 39:
#line 217 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 20;
   buf->data[buf->size++] = 1;
}}
	break;
	case 40:
#line 222 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 20;
   buf->data[buf->size++] = 2;
}}
	break;
	case 41:
#line 237 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 22;
   buf->data[buf->size++] = 1;
}}
	break;
	case 42:
#line 242 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 22;
   buf->data[buf->size++] = 2;
}}
	break;
	case 43:
#line 247 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 22;
   buf->data[buf->size++] = 3;
}}
	break;
	case 44:
#line 252 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 22;
   buf->data[buf->size++] = 4;
}}
	break;
	case 45:
#line 267 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 24;
   buf->data[buf->size++] = 1;
}}
	break;
	case 46:
#line 272 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 24;
   buf->data[buf->size++] = 2;
}}
	break;
	case 47:
#line 277 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 24;
   buf->data[buf->size++] = 3;
}}
	break;
	case 48:
#line 282 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 24;
   buf->data[buf->size++] = 4;
}}
	break;
	case 49:
#line 287 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 25;
   buf->data[buf->size++] = 1;
}}
	break;
	case 50:
#line 292 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 25;
   buf->data[buf->size++] = 2;
}}
	break;
	case 51:
#line 307 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 27;
   buf->data[buf->size++] = 1;
}}
	break;
	case 52:
#line 312 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 27;
   buf->data[buf->size++] = 2;
}}
	break;
	case 53:
#line 317 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 27;
   buf->data[buf->size++] = 3;
}}
	break;
	case 54:
#line 322 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 27;
   buf->data[buf->size++] = 4;
}}
	break;
	case 55:
#line 337 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 29;
   buf->data[buf->size++] = 1;
}}
	break;
	case 56:
#line 342 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 29;
   buf->data[buf->size++] = 2;
}}
	break;
	case 57:
#line 347 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 29;
   buf->data[buf->size++] = 3;
}}
	break;
	case 58:
#line 352 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 29;
   buf->data[buf->size++] = 4;
}}
	break;
	case 59:
#line 357 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 30;
   buf->data[buf->size++] = 1;
}}
	break;
	case 60:
#line 362 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 30;
   buf->data[buf->size++] = 2;
}}
	break;
	case 61:
#line 377 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 32;
   buf->data[buf->size++] = 1;
}}
	break;
	case 62:
#line 382 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 32;
   buf->data[buf->size++] = 2;
}}
	break;
	case 63:
#line 387 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 32;
   buf->data[buf->size++] = 3;
}}
	break;
	case 64:
#line 392 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 32;
   buf->data[buf->size++] = 4;
}}
	break;
	case 65:
#line 407 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 34;
   buf->data[buf->size++] = 1;
}}
	break;
	case 66:
#line 412 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 34;
   buf->data[buf->size++] = 2;
}}
	break;
	case 67:
#line 417 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 34;
   buf->data[buf->size++] = 3;
}}
	break;
	case 68:
#line 422 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 34;
   buf->data[buf->size++] = 4;
}}
	break;
	case 69:
#line 427 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 35;
   buf->data[buf->size++] = 1;
}}
	break;
	case 70:
#line 432 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 35;
   buf->data[buf->size++] = 2;
}}
	break;
	case 71:
#line 447 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 37;
   buf->data[buf->size++] = 1;
}}
	break;
	case 72:
#line 452 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 37;
   buf->data[buf->size++] = 2;
}}
	break;
	case 73:
#line 457 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 37;
   buf->data[buf->size++] = 3;
}}
	break;
	case 74:
#line 462 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 37;
   buf->data[buf->size++] = 4;
}}
	break;
	case 75:
#line 477 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 39;
   buf->data[buf->size++] = 1;
}}
	break;
	case 76:
#line 482 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 39;
   buf->data[buf->size++] = 2;
}}
	break;
	case 77:
#line 487 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 39;
   buf->data[buf->size++] = 3;
}}
	break;
	case 78:
#line 492 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 39;
   buf->data[buf->size++] = 4;
}}
	break;
	case 79:
#line 497 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 40;
   buf->data[buf->size++] = 1;
}}
	break;
	case 80:
#line 502 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 40;
   buf->data[buf->size++] = 2;
}}
	break;
	case 81:
#line 517 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 42;
   buf->data[buf->size++] = 1;
}}
	break;
	case 82:
#line 522 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 42;
   buf->data[buf->size++] = 2;
}}
	break;
	case 83:
#line 527 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 42;
   buf->data[buf->size++] = 3;
}}
	break;
	case 84:
#line 532 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 42;
   buf->data[buf->size++] = 4;
}}
	break;
	case 85:
#line 547 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 44;
   buf->data[buf->size++] = 1;
}}
	break;
	case 86:
#line 552 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 44;
   buf->data[buf->size++] = 2;
}}
	break;
	case 87:
#line 557 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 44;
   buf->data[buf->size++] = 3;
}}
	break;
	case 88:
#line 562 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 44;
   buf->data[buf->size++] = 4;
}}
	break;
	case 89:
#line 567 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 45;
   buf->data[buf->size++] = 1;
}}
	break;
	case 90:
#line 572 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 45;
   buf->data[buf->size++] = 2;
}}
	break;
	case 91:
#line 577 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 46;
   buf->data[buf->size++] = 1;
}}
	break;
	case 92:
#line 582 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 46;
   buf->data[buf->size++] = 2;
}}
	break;
	case 93:
#line 607 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 49;
   buf->data[buf->size++] = 1;
}}
	break;
	case 94:
#line 612 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 49;
   buf->data[buf->size++] = 2;
}}
	break;
	case 95:
#line 617 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 50;
   buf->data[buf->size++] = 1;
}}
	break;
	case 96:
#line 622 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 50;
   buf->data[buf->size++] = 2;
}}
	break;
	case 97:
#line 627 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 51;
   buf->data[buf->size++] = 1;
}}
	break;
	case 98:
#line 632 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 51;
   buf->data[buf->size++] = 2;
}}
	break;
	case 99:
#line 637 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 52;
   buf->data[buf->size++] = 1;
}}
	break;
	case 100:
#line 642 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 52;
   buf->data[buf->size++] = 2;
}}
	break;
	case 101:
#line 647 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 53;
   buf->data[buf->size++] = 1;
}}
	break;
	case 102:
#line 652 "skt_sort.rl"
	{te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 53;
   buf->data[buf->size++] = 2;
}}
	break;
	case 103:
#line 789 "skt_sort.rl"
	{te = p+1;{
      skt_buf_grow(buf, 2);
      buf->data[buf->size++] = 0xff;
      buf->data[buf->size++] = *p;
   }}
	break;
	case 104:
#line 7 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 1;
   buf->data[buf->size++] = 1;
}}
	break;
	case 105:
#line 12 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 1;
   buf->data[buf->size++] = 2;
}}
	break;
	case 106:
#line 67 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 7;
   buf->data[buf->size++] = 1;
}}
	break;
	case 107:
#line 72 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 7;
   buf->data[buf->size++] = 2;
}}
	break;
	case 108:
#line 107 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 11;
   buf->data[buf->size++] = 1;
}}
	break;
	case 109:
#line 112 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 11;
   buf->data[buf->size++] = 2;
}}
	break;
	case 110:
#line 227 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 21;
   buf->data[buf->size++] = 1;
}}
	break;
	case 111:
#line 232 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 21;
   buf->data[buf->size++] = 2;
}}
	break;
	case 112:
#line 257 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 23;
   buf->data[buf->size++] = 1;
}}
	break;
	case 113:
#line 262 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 23;
   buf->data[buf->size++] = 2;
}}
	break;
	case 114:
#line 297 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 26;
   buf->data[buf->size++] = 1;
}}
	break;
	case 115:
#line 302 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 26;
   buf->data[buf->size++] = 2;
}}
	break;
	case 116:
#line 327 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 28;
   buf->data[buf->size++] = 1;
}}
	break;
	case 117:
#line 332 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 28;
   buf->data[buf->size++] = 2;
}}
	break;
	case 118:
#line 367 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 31;
   buf->data[buf->size++] = 1;
}}
	break;
	case 119:
#line 372 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 31;
   buf->data[buf->size++] = 2;
}}
	break;
	case 120:
#line 397 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 33;
   buf->data[buf->size++] = 1;
}}
	break;
	case 121:
#line 402 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 33;
   buf->data[buf->size++] = 2;
}}
	break;
	case 122:
#line 437 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 36;
   buf->data[buf->size++] = 1;
}}
	break;
	case 123:
#line 442 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 36;
   buf->data[buf->size++] = 2;
}}
	break;
	case 124:
#line 467 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 38;
   buf->data[buf->size++] = 1;
}}
	break;
	case 125:
#line 472 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 38;
   buf->data[buf->size++] = 2;
}}
	break;
	case 126:
#line 507 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 41;
   buf->data[buf->size++] = 1;
}}
	break;
	case 127:
#line 512 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 41;
   buf->data[buf->size++] = 2;
}}
	break;
	case 128:
#line 537 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 43;
   buf->data[buf->size++] = 1;
}}
	break;
	case 129:
#line 542 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 43;
   buf->data[buf->size++] = 2;
}}
	break;
	case 130:
#line 587 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 47;
   buf->data[buf->size++] = 1;
}}
	break;
	case 131:
#line 592 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 47;
   buf->data[buf->size++] = 2;
}}
	break;
	case 132:
#line 597 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 48;
   buf->data[buf->size++] = 1;
}}
	break;
	case 133:
#line 602 "skt_sort.rl"
	{te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 48;
   buf->data[buf->size++] = 2;
}}
	break;
	case 134:
#line 789 "skt_sort.rl"
	{te = p;p--;{
      skt_buf_grow(buf, 2);
      buf->data[buf->size++] = 0xff;
      buf->data[buf->size++] = *p;
   }}
	break;
	case 135:
#line 67 "skt_sort.rl"
	{{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 7;
   buf->data[buf->size++] = 1;
}}
	break;
	case 136:
#line 72 "skt_sort.rl"
	{{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 7;
   buf->data[buf->size++] = 2;
}}
	break;
	case 137:
#line 107 "skt_sort.rl"
	{{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 11;
   buf->data[buf->size++] = 1;
}}
	break;
	case 138:
#line 112 "skt_sort.rl"
	{{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 11;
   buf->data[buf->size++] = 2;
}}
	break;
	case 139:
#line 587 "skt_sort.rl"
	{{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 47;
   buf->data[buf->size++] = 1;
}}
	break;
	case 140:
#line 592 "skt_sort.rl"
	{{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 47;
   buf->data[buf->size++] = 2;
}}
	break;
	case 141:
#line 597 "skt_sort.rl"
	{{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 48;
   buf->data[buf->size++] = 1;
}}
	break;
	case 142:
#line 602 "skt_sort.rl"
	{{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 48;
   buf->data[buf->size++] = 2;
}}
	break;
	case 143:
#line 789 "skt_sort.rl"
	{{p = ((te))-1;}{
      skt_buf_grow(buf, 2);
      buf->data[buf->size++] = 0xff;
      buf->data[buf->size++] = *p;
   }}
	break;
#line 1445 "skt_sort.ic"
		}
	}

_again:
	_acts = _skt_sort_key_actions + _skt_sort_key_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
#line 1 "NONE"
	{ts = 0;}
	break;
#line 1458 "skt_sort.ic"
		}
	}

	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _skt_sort_key_eof_trans[cs] > 0 ) {
		_trans = _skt_sort_key_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	}

#line 810 "skt_sort.rl"
   skt_buf_truncate(buf, buf->size);
}
