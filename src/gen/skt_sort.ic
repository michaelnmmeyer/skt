
#line 1 "skt_sort.rl"

#line 801 "skt_sort.rl"


void skt_sort_key(struct skt_buf *buf, const char *str, size_t len)
{
   int cs, act;
   const unsigned char *ts, *te;
   const unsigned char *p = (const unsigned char *)str;
   const unsigned char *pe = &p[len];
   const unsigned char *const eof = pe;

   buf->size = 0;

#line 18 "skt_sort.ic"
static const unsigned char _skt_sort_key_actions[] = {
   0, 1, 0, 1, 1, 1, 2, 1,
   3, 1, 4, 1, 5, 1, 6, 1,
   7, 1, 8, 1, 9, 1, 10, 1,
   11, 1, 12, 1, 13, 1, 14, 1,
   15, 1, 16, 1, 17, 1, 18, 1,
   19, 1, 20, 1, 21, 1, 22, 1,
   23, 1, 24, 1, 25, 1, 26, 1,
   27, 1, 28, 1, 29, 1, 30, 1,
   31, 1, 32, 1, 33, 1, 34, 1,
   35, 1, 36, 1, 37, 1, 38, 1,
   39, 1, 40, 1, 41, 1, 42, 1,
   43, 1, 44, 1, 45, 1, 46, 1,
   47, 1, 48, 1, 49, 1, 50, 1,
   51, 1, 52, 1, 53, 1, 54, 1,
   55, 1, 56, 1, 57, 1, 58, 1,
   59, 1, 60, 1, 61, 1, 62, 1,
   63, 1, 64, 1, 65, 1, 66, 1,
   67, 1, 68, 1, 69, 1, 70, 1,
   71, 1, 72, 1, 73, 1, 74, 1,
   75, 1, 76, 1, 77, 1, 78, 1,
   79, 1, 80, 1, 81, 1, 82, 1,
   83, 1, 84, 1, 85, 1, 86, 1,
   87, 1, 88, 1, 89, 1, 90, 1,
   91, 1, 92, 1, 93, 1, 94, 1,
   95, 1, 96, 1, 97, 1, 98, 1,
   99, 1, 100, 1, 101, 1, 102, 1,
   103, 1, 104, 1, 105, 1, 106, 1,
   107, 1, 108, 1, 109, 1, 110, 1,
   111, 1, 112, 1, 113, 1, 114, 1,
   115, 1, 116, 1, 117, 1, 118, 1,
   119, 1, 120, 1, 121, 1, 122, 1,
   123, 1, 124, 1, 125, 1, 126, 1,
   127, 1, 128, 1, 129, 1, 130, 1,
   131, 1, 132, 1, 133, 1, 134, 1,
   135, 1, 136, 1, 137, 1, 138, 1,
   139, 1, 140, 1, 141, 1, 142, 1,
   143, 1, 144, 1, 145, 1, 146
};

static const unsigned char _skt_sort_key_key_offsets[] = {
   0, 1, 2, 3, 4, 5, 6, 7,
   8, 16, 30, 37, 38, 91, 92, 96,
   98, 100, 102, 104, 106, 108, 109, 110,
   112, 113, 114, 116, 120, 122, 124, 126,
   128, 130, 132, 133, 134, 136, 137, 138,
   140, 142, 144, 148, 152, 154, 156, 158,
   160, 162
};

static const unsigned char _skt_sort_key_trans_keys[] = {
   165u, 132u, 165u, 132u, 165u, 132u, 165u, 132u,
   140u, 141u, 164u, 165u, 182u, 183u, 184u, 185u,
   130u, 131u, 132u, 133u, 134u, 135u, 154u, 155u,
   156u, 157u, 162u, 163u, 172u, 173u, 175u, 128u,
   139u, 147u, 148u, 168u, 169u, 159u, 13u, 32u,
   45u, 65u, 66u, 67u, 68u, 69u, 71u, 72u,
   73u, 74u, 75u, 76u, 77u, 78u, 79u, 80u,
   82u, 83u, 84u, 85u, 86u, 89u, 97u, 98u,
   99u, 100u, 101u, 103u, 104u, 105u, 106u, 107u,
   108u, 109u, 110u, 111u, 112u, 114u, 115u, 116u,
   117u, 118u, 121u, 194u, 195u, 196u, 197u, 225u,
   226u, 9u, 12u, 10u, 73u, 85u, 105u, 117u,
   72u, 104u, 72u, 104u, 72u, 104u, 72u, 104u,
   72u, 104u, 72u, 104u, 204u, 204u, 72u, 104u,
   204u, 204u, 72u, 104u, 73u, 85u, 105u, 117u,
   72u, 104u, 72u, 104u, 72u, 104u, 72u, 104u,
   72u, 104u, 72u, 104u, 204u, 204u, 72u, 104u,
   204u, 204u, 72u, 104u, 133u, 160u, 145u, 177u,
   128u, 129u, 170u, 171u, 154u, 155u, 170u, 171u,
   184u, 185u, 72u, 104u, 72u, 104u, 72u, 104u,
   72u, 104u, 128u, 129u, 0
};

static const char _skt_sort_key_single_lengths[] = {
   1, 1, 1, 1, 1, 1, 1, 1,
   8, 14, 1, 1, 51, 1, 4, 2,
   2, 2, 2, 2, 2, 1, 1, 2,
   1, 1, 2, 4, 2, 2, 2, 2,
   2, 2, 1, 1, 2, 1, 1, 2,
   2, 2, 4, 4, 2, 2, 2, 2,
   2, 2
};

static const char _skt_sort_key_range_lengths[] = {
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 3, 0, 1, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0
};

static const short _skt_sort_key_index_offsets[] = {
   0, 2, 4, 6, 8, 10, 12, 14,
   16, 25, 40, 45, 47, 100, 102, 107,
   110, 113, 116, 119, 122, 125, 127, 129,
   132, 134, 136, 139, 144, 147, 150, 153,
   156, 159, 162, 164, 166, 169, 171, 173,
   176, 179, 182, 187, 192, 195, 198, 201,
   204, 207
};

static const char _skt_sort_key_trans_targs[] = {
   22, 12, 12, 12, 25, 12, 12, 12,
   35, 12, 12, 12, 38, 12, 12, 12,
   45, 46, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 47, 48, 12,
   12, 12, 12, 12, 12, 12, 12, 13,
   12, 12, 14, 15, 16, 17, 12, 18,
   12, 12, 19, 20, 21, 12, 12, 12,
   23, 24, 12, 26, 12, 12, 12, 27,
   28, 29, 30, 12, 31, 12, 12, 32,
   33, 34, 12, 12, 12, 36, 37, 12,
   39, 12, 12, 12, 40, 41, 42, 43,
   44, 49, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 0, 12, 1,
   12, 12, 12, 12, 2, 12, 3, 12,
   12, 12, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 12, 12, 12,
   12, 12, 4, 12, 5, 12, 12, 12,
   12, 6, 12, 7, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 12, 12, 12,
   8, 9, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 12, 12, 10,
   11, 12, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 12, 12, 12, 12, 12,
   12, 12, 12, 0
};

static const short _skt_sort_key_trans_actions[] = {
   5, 289, 47, 281, 5, 285, 31, 277,
   5, 291, 49, 283, 5, 287, 33, 279,
   0, 0, 79, 81, 39, 41, 43, 45,
   293, 75, 77, 99, 101, 139, 141, 27,
   29, 35, 37, 195, 197, 0, 0, 293,
   209, 209, 207, 209, 293, 209, 293, 0,
   209, 207, 0, 0, 0, 0, 51, 0,
   203, 11, 0, 0, 5, 179, 159, 63,
   0, 5, 199, 0, 19, 187, 183, 0,
   0, 0, 0, 53, 0, 205, 13, 0,
   0, 5, 181, 161, 65, 0, 5, 201,
   0, 21, 189, 185, 0, 0, 0, 0,
   5, 5, 209, 211, 209, 273, 55, 67,
   57, 69, 213, 171, 173, 261, 103, 105,
   233, 151, 153, 253, 91, 93, 229, 111,
   113, 237, 83, 85, 225, 0, 269, 0,
   221, 163, 165, 257, 0, 265, 0, 217,
   143, 145, 249, 59, 71, 61, 73, 215,
   175, 177, 263, 107, 109, 235, 155, 157,
   255, 95, 97, 231, 115, 117, 239, 87,
   89, 227, 0, 271, 0, 223, 167, 169,
   259, 0, 267, 0, 219, 147, 149, 251,
   209, 209, 275, 119, 121, 275, 7, 9,
   15, 17, 275, 191, 193, 23, 25, 275,
   0, 0, 275, 131, 133, 245, 135, 137,
   247, 123, 125, 241, 127, 129, 243, 0,
   0, 275, 289, 281, 285, 277, 291, 283,
   287, 279, 293, 293, 293, 293, 273, 213,
   261, 233, 253, 229, 237, 225, 269, 221,
   257, 265, 217, 249, 215, 263, 235, 255,
   231, 239, 227, 271, 223, 259, 267, 219,
   251, 275, 275, 275, 275, 275, 245, 247,
   241, 243, 275, 0
};

static const short _skt_sort_key_to_state_actions[] = {
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 1, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0
};

static const short _skt_sort_key_from_state_actions[] = {
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 3, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0
};

static const short _skt_sort_key_eof_trans[] = {
   211, 212, 213, 214, 215, 216, 217, 218,
   222, 222, 222, 222, 0, 223, 224, 225,
   226, 227, 228, 229, 230, 231, 232, 233,
   234, 235, 236, 237, 238, 239, 240, 241,
   242, 243, 244, 245, 246, 247, 248, 249,
   259, 259, 259, 259, 259, 255, 256, 257,
   258, 259
};

static const int skt_sort_key_start = 12;
static const int skt_sort_key_first_final = 12;
static const int skt_sort_key_error = -1;

static const int skt_sort_key_en_main = 12;


#line 813 "skt_sort.rl"

#line 234 "skt_sort.ic"
   {
   cs = skt_sort_key_start;
   ts = 0;
   te = 0;
   act = 0;
   }

#line 814 "skt_sort.rl"

#line 244 "skt_sort.ic"
   {
   int _klen;
   unsigned int _trans;
   const unsigned char *_acts;
   unsigned int _nacts;
   const unsigned char *_keys;

   if ( p == pe )
      goto _test_eof;
_resume:
   _acts = _skt_sort_key_actions + _skt_sort_key_from_state_actions[cs];
   _nacts = (unsigned int) *_acts++;
   while ( _nacts-- > 0 ) {
      switch ( *_acts++ ) {
   case 1:
#line 1 "NONE"
   {ts = p;}
   break;
#line 263 "skt_sort.ic"
      }
   }

   _keys = _skt_sort_key_trans_keys + _skt_sort_key_key_offsets[cs];
   _trans = _skt_sort_key_index_offsets[cs];

   _klen = _skt_sort_key_single_lengths[cs];
   if ( _klen > 0 ) {
      const unsigned char *_lower = _keys;
      const unsigned char *_mid;
      const unsigned char *_upper = _keys + _klen - 1;
      while (1) {
         if ( _upper < _lower )
            break;

         _mid = _lower + ((_upper-_lower) >> 1);
         if ( (*p) < *_mid )
            _upper = _mid - 1;
         else if ( (*p) > *_mid )
            _lower = _mid + 1;
         else {
            _trans += (unsigned int)(_mid - _keys);
            goto _match;
         }
      }
      _keys += _klen;
      _trans += _klen;
   }

   _klen = _skt_sort_key_range_lengths[cs];
   if ( _klen > 0 ) {
      const unsigned char *_lower = _keys;
      const unsigned char *_mid;
      const unsigned char *_upper = _keys + (_klen<<1) - 2;
      while (1) {
         if ( _upper < _lower )
            break;

         _mid = _lower + (((_upper-_lower) >> 1) & ~1);
         if ( (*p) < _mid[0] )
            _upper = _mid - 2;
         else if ( (*p) > _mid[1] )
            _lower = _mid + 2;
         else {
            _trans += (unsigned int)((_mid - _keys)>>1);
            goto _match;
         }
      }
      _trans += _klen;
   }

_match:
_eof_trans:
   cs = _skt_sort_key_trans_targs[_trans];

   if ( _skt_sort_key_trans_actions[_trans] == 0 )
      goto _again;

   _acts = _skt_sort_key_actions + _skt_sort_key_trans_actions[_trans];
   _nacts = (unsigned int) *_acts++;
   while ( _nacts-- > 0 )
   {
      switch ( *_acts++ )
      {
   case 2:
#line 1 "NONE"
   {te = p+1;}
   break;
   case 3:
#line 20 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 2;
   buf->data[buf->size++] = 1;
}}
   break;
   case 4:
#line 25 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 2;
   buf->data[buf->size++] = 2;
}}
   break;
   case 5:
#line 30 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 3;
   buf->data[buf->size++] = 1;
}}
   break;
   case 6:
#line 35 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 3;
   buf->data[buf->size++] = 2;
}}
   break;
   case 7:
#line 40 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 4;
   buf->data[buf->size++] = 1;
}}
   break;
   case 8:
#line 45 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 4;
   buf->data[buf->size++] = 2;
}}
   break;
   case 9:
#line 50 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 5;
   buf->data[buf->size++] = 1;
}}
   break;
   case 10:
#line 55 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 5;
   buf->data[buf->size++] = 2;
}}
   break;
   case 11:
#line 60 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 6;
   buf->data[buf->size++] = 1;
}}
   break;
   case 12:
#line 65 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 6;
   buf->data[buf->size++] = 2;
}}
   break;
   case 13:
#line 80 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 8;
   buf->data[buf->size++] = 1;
}}
   break;
   case 14:
#line 85 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 8;
   buf->data[buf->size++] = 2;
}}
   break;
   case 15:
#line 90 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 9;
   buf->data[buf->size++] = 1;
}}
   break;
   case 16:
#line 95 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 9;
   buf->data[buf->size++] = 2;
}}
   break;
   case 17:
#line 100 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 10;
   buf->data[buf->size++] = 1;
}}
   break;
   case 18:
#line 105 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 10;
   buf->data[buf->size++] = 2;
}}
   break;
   case 19:
#line 120 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 12;
   buf->data[buf->size++] = 1;
}}
   break;
   case 20:
#line 125 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 12;
   buf->data[buf->size++] = 2;
}}
   break;
   case 21:
#line 130 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 13;
   buf->data[buf->size++] = 1;
}}
   break;
   case 22:
#line 135 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 13;
   buf->data[buf->size++] = 2;
}}
   break;
   case 23:
#line 140 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 14;
   buf->data[buf->size++] = 1;
}}
   break;
   case 24:
#line 145 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 14;
   buf->data[buf->size++] = 2;
}}
   break;
   case 25:
#line 150 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 15;
   buf->data[buf->size++] = 1;
}}
   break;
   case 26:
#line 155 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 15;
   buf->data[buf->size++] = 2;
}}
   break;
   case 27:
#line 160 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 16;
   buf->data[buf->size++] = 1;
}}
   break;
   case 28:
#line 165 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 16;
   buf->data[buf->size++] = 2;
}}
   break;
   case 29:
#line 170 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 16;
   buf->data[buf->size++] = 3;
}}
   break;
   case 30:
#line 175 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 16;
   buf->data[buf->size++] = 4;
}}
   break;
   case 31:
#line 180 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 17;
   buf->data[buf->size++] = 1;
}}
   break;
   case 32:
#line 185 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 17;
   buf->data[buf->size++] = 2;
}}
   break;
   case 33:
#line 190 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 18;
   buf->data[buf->size++] = 1;
}}
   break;
   case 34:
#line 195 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 18;
   buf->data[buf->size++] = 2;
}}
   break;
   case 35:
#line 200 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 18;
   buf->data[buf->size++] = 3;
}}
   break;
   case 36:
#line 205 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 18;
   buf->data[buf->size++] = 4;
}}
   break;
   case 37:
#line 210 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 19;
   buf->data[buf->size++] = 1;
}}
   break;
   case 38:
#line 215 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 19;
   buf->data[buf->size++] = 2;
}}
   break;
   case 39:
#line 220 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 20;
   buf->data[buf->size++] = 1;
}}
   break;
   case 40:
#line 225 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 20;
   buf->data[buf->size++] = 2;
}}
   break;
   case 41:
#line 240 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 22;
   buf->data[buf->size++] = 1;
}}
   break;
   case 42:
#line 245 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 22;
   buf->data[buf->size++] = 2;
}}
   break;
   case 43:
#line 250 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 22;
   buf->data[buf->size++] = 3;
}}
   break;
   case 44:
#line 255 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 22;
   buf->data[buf->size++] = 4;
}}
   break;
   case 45:
#line 270 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 24;
   buf->data[buf->size++] = 1;
}}
   break;
   case 46:
#line 275 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 24;
   buf->data[buf->size++] = 2;
}}
   break;
   case 47:
#line 280 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 24;
   buf->data[buf->size++] = 3;
}}
   break;
   case 48:
#line 285 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 24;
   buf->data[buf->size++] = 4;
}}
   break;
   case 49:
#line 290 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 25;
   buf->data[buf->size++] = 1;
}}
   break;
   case 50:
#line 295 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 25;
   buf->data[buf->size++] = 2;
}}
   break;
   case 51:
#line 310 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 27;
   buf->data[buf->size++] = 1;
}}
   break;
   case 52:
#line 315 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 27;
   buf->data[buf->size++] = 2;
}}
   break;
   case 53:
#line 320 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 27;
   buf->data[buf->size++] = 3;
}}
   break;
   case 54:
#line 325 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 27;
   buf->data[buf->size++] = 4;
}}
   break;
   case 55:
#line 340 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 29;
   buf->data[buf->size++] = 1;
}}
   break;
   case 56:
#line 345 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 29;
   buf->data[buf->size++] = 2;
}}
   break;
   case 57:
#line 350 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 29;
   buf->data[buf->size++] = 3;
}}
   break;
   case 58:
#line 355 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 29;
   buf->data[buf->size++] = 4;
}}
   break;
   case 59:
#line 360 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 30;
   buf->data[buf->size++] = 1;
}}
   break;
   case 60:
#line 365 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 30;
   buf->data[buf->size++] = 2;
}}
   break;
   case 61:
#line 380 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 32;
   buf->data[buf->size++] = 1;
}}
   break;
   case 62:
#line 385 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 32;
   buf->data[buf->size++] = 2;
}}
   break;
   case 63:
#line 390 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 32;
   buf->data[buf->size++] = 3;
}}
   break;
   case 64:
#line 395 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 32;
   buf->data[buf->size++] = 4;
}}
   break;
   case 65:
#line 410 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 34;
   buf->data[buf->size++] = 1;
}}
   break;
   case 66:
#line 415 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 34;
   buf->data[buf->size++] = 2;
}}
   break;
   case 67:
#line 420 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 34;
   buf->data[buf->size++] = 3;
}}
   break;
   case 68:
#line 425 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 34;
   buf->data[buf->size++] = 4;
}}
   break;
   case 69:
#line 430 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 35;
   buf->data[buf->size++] = 1;
}}
   break;
   case 70:
#line 435 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 35;
   buf->data[buf->size++] = 2;
}}
   break;
   case 71:
#line 450 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 37;
   buf->data[buf->size++] = 1;
}}
   break;
   case 72:
#line 455 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 37;
   buf->data[buf->size++] = 2;
}}
   break;
   case 73:
#line 460 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 37;
   buf->data[buf->size++] = 3;
}}
   break;
   case 74:
#line 465 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 37;
   buf->data[buf->size++] = 4;
}}
   break;
   case 75:
#line 480 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 39;
   buf->data[buf->size++] = 1;
}}
   break;
   case 76:
#line 485 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 39;
   buf->data[buf->size++] = 2;
}}
   break;
   case 77:
#line 490 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 39;
   buf->data[buf->size++] = 3;
}}
   break;
   case 78:
#line 495 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 39;
   buf->data[buf->size++] = 4;
}}
   break;
   case 79:
#line 500 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 40;
   buf->data[buf->size++] = 1;
}}
   break;
   case 80:
#line 505 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 40;
   buf->data[buf->size++] = 2;
}}
   break;
   case 81:
#line 520 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 42;
   buf->data[buf->size++] = 1;
}}
   break;
   case 82:
#line 525 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 42;
   buf->data[buf->size++] = 2;
}}
   break;
   case 83:
#line 530 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 42;
   buf->data[buf->size++] = 3;
}}
   break;
   case 84:
#line 535 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 42;
   buf->data[buf->size++] = 4;
}}
   break;
   case 85:
#line 550 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 44;
   buf->data[buf->size++] = 1;
}}
   break;
   case 86:
#line 555 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 44;
   buf->data[buf->size++] = 2;
}}
   break;
   case 87:
#line 560 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 44;
   buf->data[buf->size++] = 3;
}}
   break;
   case 88:
#line 565 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 44;
   buf->data[buf->size++] = 4;
}}
   break;
   case 89:
#line 570 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 45;
   buf->data[buf->size++] = 1;
}}
   break;
   case 90:
#line 575 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 45;
   buf->data[buf->size++] = 2;
}}
   break;
   case 91:
#line 580 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 46;
   buf->data[buf->size++] = 1;
}}
   break;
   case 92:
#line 585 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 46;
   buf->data[buf->size++] = 2;
}}
   break;
   case 93:
#line 610 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 49;
   buf->data[buf->size++] = 1;
}}
   break;
   case 94:
#line 615 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 49;
   buf->data[buf->size++] = 2;
}}
   break;
   case 95:
#line 620 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 50;
   buf->data[buf->size++] = 1;
}}
   break;
   case 96:
#line 625 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 50;
   buf->data[buf->size++] = 2;
}}
   break;
   case 97:
#line 630 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 51;
   buf->data[buf->size++] = 1;
}}
   break;
   case 98:
#line 635 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 51;
   buf->data[buf->size++] = 2;
}}
   break;
   case 99:
#line 640 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 52;
   buf->data[buf->size++] = 1;
}}
   break;
   case 100:
#line 645 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 52;
   buf->data[buf->size++] = 2;
}}
   break;
   case 101:
#line 650 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 53;
   buf->data[buf->size++] = 1;
}}
   break;
   case 102:
#line 655 "skt_sort.rl"
   {te = p+1;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 53;
   buf->data[buf->size++] = 2;
}}
   break;
   case 103:
#line 792 "skt_sort.rl"
   {te = p+1;}
   break;
   case 104:
#line 793 "skt_sort.rl"
   {te = p+1;}
   break;
   case 105:
#line 794 "skt_sort.rl"
   {te = p+1;{
      skt_buf_grow(buf, 2);
      buf->data[buf->size++] = 0xff;
      buf->data[buf->size++] = *p;
   }}
   break;
   case 106:
#line 10 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 1;
   buf->data[buf->size++] = 1;
}}
   break;
   case 107:
#line 15 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 1;
   buf->data[buf->size++] = 2;
}}
   break;
   case 108:
#line 70 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 7;
   buf->data[buf->size++] = 1;
}}
   break;
   case 109:
#line 75 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 7;
   buf->data[buf->size++] = 2;
}}
   break;
   case 110:
#line 110 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 11;
   buf->data[buf->size++] = 1;
}}
   break;
   case 111:
#line 115 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 11;
   buf->data[buf->size++] = 2;
}}
   break;
   case 112:
#line 230 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 21;
   buf->data[buf->size++] = 1;
}}
   break;
   case 113:
#line 235 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 21;
   buf->data[buf->size++] = 2;
}}
   break;
   case 114:
#line 260 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 23;
   buf->data[buf->size++] = 1;
}}
   break;
   case 115:
#line 265 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 23;
   buf->data[buf->size++] = 2;
}}
   break;
   case 116:
#line 300 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 26;
   buf->data[buf->size++] = 1;
}}
   break;
   case 117:
#line 305 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 26;
   buf->data[buf->size++] = 2;
}}
   break;
   case 118:
#line 330 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 28;
   buf->data[buf->size++] = 1;
}}
   break;
   case 119:
#line 335 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 28;
   buf->data[buf->size++] = 2;
}}
   break;
   case 120:
#line 370 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 31;
   buf->data[buf->size++] = 1;
}}
   break;
   case 121:
#line 375 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 31;
   buf->data[buf->size++] = 2;
}}
   break;
   case 122:
#line 400 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 33;
   buf->data[buf->size++] = 1;
}}
   break;
   case 123:
#line 405 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 33;
   buf->data[buf->size++] = 2;
}}
   break;
   case 124:
#line 440 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 36;
   buf->data[buf->size++] = 1;
}}
   break;
   case 125:
#line 445 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 36;
   buf->data[buf->size++] = 2;
}}
   break;
   case 126:
#line 470 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 38;
   buf->data[buf->size++] = 1;
}}
   break;
   case 127:
#line 475 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 38;
   buf->data[buf->size++] = 2;
}}
   break;
   case 128:
#line 510 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 41;
   buf->data[buf->size++] = 1;
}}
   break;
   case 129:
#line 515 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 41;
   buf->data[buf->size++] = 2;
}}
   break;
   case 130:
#line 540 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 43;
   buf->data[buf->size++] = 1;
}}
   break;
   case 131:
#line 545 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 43;
   buf->data[buf->size++] = 2;
}}
   break;
   case 132:
#line 590 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 47;
   buf->data[buf->size++] = 1;
}}
   break;
   case 133:
#line 595 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 47;
   buf->data[buf->size++] = 2;
}}
   break;
   case 134:
#line 600 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 48;
   buf->data[buf->size++] = 1;
}}
   break;
   case 135:
#line 605 "skt_sort.rl"
   {te = p;p--;{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 48;
   buf->data[buf->size++] = 2;
}}
   break;
   case 136:
#line 793 "skt_sort.rl"
   {te = p;p--;}
   break;
   case 137:
#line 794 "skt_sort.rl"
   {te = p;p--;{
      skt_buf_grow(buf, 2);
      buf->data[buf->size++] = 0xff;
      buf->data[buf->size++] = *p;
   }}
   break;
   case 138:
#line 70 "skt_sort.rl"
   {{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 7;
   buf->data[buf->size++] = 1;
}}
   break;
   case 139:
#line 75 "skt_sort.rl"
   {{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 7;
   buf->data[buf->size++] = 2;
}}
   break;
   case 140:
#line 110 "skt_sort.rl"
   {{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 11;
   buf->data[buf->size++] = 1;
}}
   break;
   case 141:
#line 115 "skt_sort.rl"
   {{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 11;
   buf->data[buf->size++] = 2;
}}
   break;
   case 142:
#line 590 "skt_sort.rl"
   {{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 47;
   buf->data[buf->size++] = 1;
}}
   break;
   case 143:
#line 595 "skt_sort.rl"
   {{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 47;
   buf->data[buf->size++] = 2;
}}
   break;
   case 144:
#line 600 "skt_sort.rl"
   {{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 48;
   buf->data[buf->size++] = 1;
}}
   break;
   case 145:
#line 605 "skt_sort.rl"
   {{p = ((te))-1;}{
   skt_buf_grow(buf, 2);
   buf->data[buf->size++] = 48;
   buf->data[buf->size++] = 2;
}}
   break;
   case 146:
#line 794 "skt_sort.rl"
   {{p = ((te))-1;}{
      skt_buf_grow(buf, 2);
      buf->data[buf->size++] = 0xff;
      buf->data[buf->size++] = *p;
   }}
   break;
#line 1472 "skt_sort.ic"
      }
   }

_again:
   _acts = _skt_sort_key_actions + _skt_sort_key_to_state_actions[cs];
   _nacts = (unsigned int) *_acts++;
   while ( _nacts-- > 0 ) {
      switch ( *_acts++ ) {
   case 0:
#line 1 "NONE"
   {ts = 0;}
   break;
#line 1485 "skt_sort.ic"
      }
   }

   if ( ++p != pe )
      goto _resume;
   _test_eof: {}
   if ( p == eof )
   {
   if ( _skt_sort_key_eof_trans[cs] > 0 ) {
      _trans = _skt_sort_key_eof_trans[cs] - 1;
      goto _eof_trans;
   }
   }

   }

#line 815 "skt_sort.rl"
   skt_buf_truncate(buf, buf->size);
}
